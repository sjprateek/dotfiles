[user]
    name = Prateek Sharma
[push]
    default = current
[branch]
    autosetuprebase = always
[credential]
[filter "lfs"]
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true
    clean = git-lfs clean -- %f
[lfs]
    dialtimeout = 600
    tlstimeout = 300
    activitytimeout = 60
[alias]
    # List available aliases
    aliases = !git config --get-regexp alias | sed -re 's/alias\\.(\\S*)\\s(.*)$/\\1 = \\2/g'
    # Command shortcuts
    st = status -uno
    # Display tree-like log, because default log is a pain…
    # lg = log --graph --date=relative --pretty=tformat:'%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%an %ad)%Creset'
    logline = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an, %ce>%Creset' --abbrev-commit
    # Useful when you have to update your last commit
    # with staged files without editing the commit message.
    oops = commit --amend --no-edit
    # Ensure that force-pushing won't lose someone else's work (only mine).
    push-with-lease = push --force-with-lease
    # Rebase won’t trigger hooks on each "replayed" commit.
    # This is an ugly hack that will replay each commit during rebase with the
    # standard `commit` command which will trigger hooks.
    rebase-with-hooks = rebase -x 'git reset --soft HEAD~1 && git commit -C HEAD@{1}'
    # List local commits that were not pushed to remote repository
    review-local = "!git lg @{push}.."
    # Edit last commit message
    reword = commit --amend
    # Undo last commit but keep changed files in stage
    uncommit = reset --soft HEAD~1
    # Remove file(s) from Git but not from disk
    untrack = rm --cache --
[pager]
    branch = false
[core]
    pager = more
[include]
    path = ~/.gitconfig_local
